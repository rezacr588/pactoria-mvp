name: Azure App Service Backend Deployment

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'backend/**'
      - '.github/workflows/azure-app-service.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'backend/**'
  workflow_dispatch:

# Environment variables
env:
  AZURE_WEBAPP_NAME: 'pactoria-backend'
  PYTHON_VERSION: '3.11'
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Backend
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # Cache pip dependencies for faster builds
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-azure.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Create and start virtual environment
      run: |
        cd backend
        python -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: |
        cd backend
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements-azure.txt

    # Optional: Run tests
    - name: Run tests
      run: |
        cd backend
        source venv/bin/activate
        # Add test commands here when tests are available
        # python -m pytest tests/ -v
      continue-on-error: true

    # Create deployment package
    - name: Create deployment package
      run: |
        cd backend
        # Include only necessary files for F1 tier
        zip -r ../deployment.zip . \
          --exclude="*.pyc" "__pycache__/*" "venv/*" "tests/*" "*.log" \
          "*.db" ".env*" "*.md" "docs/*" ".git/*"

    # Upload artifact for deployment
    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: backend-app
        path: deployment.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Azure App Service
    environment: production
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: backend-app
        
    - name: Unzip artifact for deployment
      run: |
        unzip deployment.zip
        rm deployment.zip

    # Login to Azure
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy to Azure Web App using container
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        package: .
        startup-command: 'python startup.py'

    # Configure App Service settings
    - name: Configure App Service settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        app-settings-json: |
          [
            {
              "name": "ENVIRONMENT",
              "value": "production"
            },
            {
              "name": "DEBUG",
              "value": "false"
            },
            {
              "name": "ENABLE_KEEPALIVE",
              "value": "true"
            },
            {
              "name": "GUNICORN_WORKERS",
              "value": "1"
            },
            {
              "name": "GUNICORN_THREADS", 
              "value": "2"
            },
            {
              "name": "SECRET_KEY",
              "value": "${{ secrets.JWT_SECRET_KEY }}"
            },
            {
              "name": "GROQ_API_KEY",
              "value": "${{ secrets.GROQ_API_KEY }}"
            },
            {
              "name": "DATABASE_URL",
              "value": "${{ secrets.AZURE_POSTGRESQL_CONNECTION_STRING }}"
            },
            {
              "name": "CORS_ORIGINS",
              "value": "https://${{ secrets.STATIC_WEB_APP_HOSTNAME }}"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}"
            }
          ]

    # Health check after deployment
    - name: Health Check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        # Check health endpoint
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Backend deployment successful! Health check passed."
        else
          echo "❌ Backend deployment may have issues. Health check returned: $response"
          exit 1
        fi

    # Optional: Run smoke tests
    - name: Run smoke tests
      run: |
        # Basic API endpoints test
        base_url="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        echo "Testing root endpoint..."
        curl -f "$base_url/" || exit 1
        
        echo "Testing health endpoint..."
        curl -f "$base_url/health" || exit 1
        
        echo "Testing ready endpoint..."
        curl -f "$base_url/ready" || exit 1
        
        echo "✅ All smoke tests passed!"
      continue-on-error: true

  # Staging deployment for PRs
  deploy-staging:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to Staging
    environment: staging
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: backend-app
        
    - name: Unzip artifact for deployment
      run: |
        unzip deployment.zip
        rm deployment.zip

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Staging Slot
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'staging'
        package: .
        startup-command: 'python startup.py'

    # Add staging-specific configuration
    - name: Configure Staging settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'staging'
        app-settings-json: |
          [
            {
              "name": "ENVIRONMENT", 
              "value": "staging"
            },
            {
              "name": "DEBUG",
              "value": "true"
            }
          ]