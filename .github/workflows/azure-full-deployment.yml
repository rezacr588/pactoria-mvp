name: Full Stack Deployment (Frontend + Backend)

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.vscode/**'
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      run_e2e_tests:
        description: 'Run E2E Tests'
        required: true
        default: true
        type: boolean

env:
  # Backend Configuration
  REGISTRY_NAME: 'pactoriaacr'
  CONTAINER_APP_NAME: 'pactoria-backend'
  BACKEND_IMAGE_NAME: 'pactoria-backend'
  
  # Frontend Configuration
  STATIC_WEB_APP_NAME: 'pactoria-frontend'
  NODE_VERSION: '18.x'
  
  # Shared Configuration
  RESOURCE_GROUP_NAME: 'pactoria-rg'
  AZURE_LOCATION: 'uksouth'

jobs:
  # Pre-deployment checks and validation
  pre-deployment-checks:
    runs-on: ubuntu-latest
    name: Pre-deployment Validation
    outputs:
      deploy_backend: ${{ steps.changes.outputs.backend == 'true' || github.event.inputs.deploy_backend == 'true' }}
      deploy_frontend: ${{ steps.changes.outputs.frontend == 'true' || github.event.inputs.deploy_frontend == 'true' }}
      run_e2e_tests: ${{ github.event.inputs.run_e2e_tests || 'true' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    # Detect changes to determine what to deploy
    - name: Detect changes
      id: changes
      run: |
        # Check if this is a workflow dispatch or full deployment
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "backend=${{ github.event.inputs.deploy_backend }}" >> $GITHUB_OUTPUT
          echo "frontend=${{ github.event.inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
        else
          # Check file changes in the last commit
          if git diff --name-only HEAD~1 HEAD | grep -E '^backend/'; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E '^frontend/'; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi
        fi

    # Validate Azure resource existence
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate Azure resources
      run: |
        echo "üîç Validating Azure resources..."
        
        # Check resource group
        if az group show --name ${{ env.RESOURCE_GROUP_NAME }} --query name -o tsv; then
          echo "‚úÖ Resource group exists"
        else
          echo "‚ùå Resource group not found"
          exit 1
        fi
        
        # Check Container Registry
        if az acr show --name ${{ env.REGISTRY_NAME }} --query name -o tsv; then
          echo "‚úÖ Container Registry exists"
        else
          echo "‚ùå Container Registry not found"
          exit 1
        fi
        
        # Check Container App (only if deploying backend)
        if [ "${{ steps.changes.outputs.backend }}" = "true" ] || [ "${{ github.event.inputs.deploy_backend }}" = "true" ]; then
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query name -o tsv; then
            echo "‚úÖ Container App exists"
          else
            echo "‚ùå Container App not found"
            exit 1
          fi
        fi
        
        # Check Static Web App (only if deploying frontend)
        if [ "${{ steps.changes.outputs.frontend }}" = "true" ] || [ "${{ github.event.inputs.deploy_frontend }}" = "true" ]; then
          if az staticwebapp show --name ${{ env.STATIC_WEB_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query name -o tsv; then
            echo "‚úÖ Static Web App exists"
          else
            echo "‚ùå Static Web App not found"
            exit 1
          fi
        fi

  # Backend deployment
  deploy-backend:
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deploy_backend == 'true'
    runs-on: ubuntu-latest
    name: Deploy Backend
    environment:
      name: production-backend
      url: https://${{ env.CONTAINER_APP_NAME }}.azurecontainerapps.io
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Quick backend tests
    - name: Run backend tests
      run: |
        cd backend
        pip install -r requirements.txt pytest pytest-asyncio
        python -m pytest tests/unit/ -v --tb=short
      env:
        ENVIRONMENT: testing
        SECRET_KEY: test-secret
        DATABASE_URL: sqlite:///./test.db

    # Login to Azure and deploy
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and deploy backend
      run: |
        echo "üöÄ Deploying backend to Azure Container Apps..."
        
        # Build and push container image using ACR task for better efficiency and cost
        az acr build --registry ${{ env.REGISTRY_NAME }} \
          --image ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
          --file backend/Dockerfile backend/
        
        # Deploy to Container Apps with blue-green deployment
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
          --revision-suffix $(date +%s)

    # Backend health check
    - name: Backend health check
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
        
        echo "‚è≥ Waiting for backend deployment..."
        sleep 45
        
        echo "üîç Testing backend health at: https://$APP_URL"
        
        for i in {1..10}; do
          if curl -f "https://$APP_URL/health"; then
            echo "‚úÖ Backend health check passed!"
            break
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Backend health check failed after 10 attempts"
            exit 1
          fi
          
          echo "‚è≥ Attempt $i failed, retrying in 15 seconds..."
          sleep 15
        done

  # Frontend deployment
  deploy-frontend:
    needs: [pre-deployment-checks, deploy-backend]
    if: |
      always() && 
      needs.pre-deployment-checks.outputs.deploy_frontend == 'true' &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped')
    runs-on: ubuntu-latest
    name: Deploy Frontend
    environment:
      name: production-frontend
      url: ${{ secrets.STATIC_WEB_APP_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Build frontend with updated backend URL
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        VITE_API_URL: https://${{ env.CONTAINER_APP_NAME }}.azurecontainerapps.io/api
        VITE_APP_NAME: 'Pactoria MVP'
        VITE_ENVIRONMENT: 'production'

    # Deploy to Azure Static Web Apps
    - name: Deploy to Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend"
        output_location: "dist"
        skip_app_build: true

  # Integration testing
  integration-tests:
    needs: [pre-deployment-checks, deploy-backend, deploy-frontend]
    if: |
      always() &&
      needs.pre-deployment-checks.outputs.run_e2e_tests == 'true' &&
      needs.deploy-backend.result != 'failure' &&
      needs.deploy-frontend.result != 'failure' &&
      (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    runs-on: ubuntu-latest
    name: Integration & E2E Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Run integration tests
    - name: Run integration tests
      run: |
        cd frontend
        npm ci
        npx playwright install chromium
        
        # Run smoke tests to verify deployment (with timeout for cost optimization)
        echo "üß™ Running integration smoke tests..."
        timeout 300 npx playwright test --config=playwright.config.ts --grep="smoke" || echo "Tests timed out after 5 minutes"
      env:
        BASE_URL: ${{ secrets.STATIC_WEB_APP_URL }}
        API_URL: https://${{ env.CONTAINER_APP_NAME }}.azurecontainerapps.io/api
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

  # Post-deployment monitoring and notifications
  post-deployment:
    needs: [deploy-backend, deploy-frontend, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    name: Post-deployment Monitoring
    
    steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Comprehensive health check
    - name: Full system health check
      run: |
        echo "üè• Running full system health check..."
        
        # Backend health check
        if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
          BACKEND_URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "üîç Testing backend endpoints..."
          curl -f "https://$BACKEND_URL/health" && echo "‚úÖ Backend health: OK"
          curl -f "https://$BACKEND_URL/api/v1/health" && echo "‚úÖ Backend API: OK"
        fi
        
        # Frontend health check
        if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
          FRONTEND_URL="${{ secrets.STATIC_WEB_APP_URL }}"
          echo "üîç Testing frontend..."
          curl -f "$FRONTEND_URL" && echo "‚úÖ Frontend: OK"
        fi

    # Generate deployment report
    - name: Generate deployment report
      run: |
        echo "üìä Deployment Summary Report" > deployment-report.md
        echo "============================" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "**Deployment Date:** $(date)" >> deployment-report.md
        echo "**Commit:** ${{ github.sha }}" >> deployment-report.md
        echo "**Triggered by:** ${{ github.actor }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Component Status" >> deployment-report.md
        echo "" >> deployment-report.md
        
        if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
          echo "- ‚úÖ **Backend**: Successfully deployed to Container Apps" >> deployment-report.md
        elif [ "${{ needs.deploy-backend.result }}" = "skipped" ]; then
          echo "- ‚è≠Ô∏è **Backend**: Skipped (no changes detected)" >> deployment-report.md
        else
          echo "- ‚ùå **Backend**: Deployment failed" >> deployment-report.md
        fi
        
        if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
          echo "- ‚úÖ **Frontend**: Successfully deployed to Static Web Apps" >> deployment-report.md
        elif [ "${{ needs.deploy-frontend.result }}" = "skipped" ]; then
          echo "- ‚è≠Ô∏è **Frontend**: Skipped (no changes detected)" >> deployment-report.md
        else
          echo "- ‚ùå **Frontend**: Deployment failed" >> deployment-report.md
        fi
        
        if [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "- ‚úÖ **Integration Tests**: All tests passed" >> deployment-report.md
        elif [ "${{ needs.integration-tests.result }}" = "skipped" ]; then
          echo "- ‚è≠Ô∏è **Integration Tests**: Skipped" >> deployment-report.md
        else
          echo "- ‚ö†Ô∏è **Integration Tests**: Some tests failed (non-blocking)" >> deployment-report.md
        fi
        
        echo "" >> deployment-report.md
        echo "## Resource URLs" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "- **Frontend**: ${{ secrets.STATIC_WEB_APP_URL }}" >> deployment-report.md
        echo "- **Backend API**: https://${{ env.CONTAINER_APP_NAME }}.azurecontainerapps.io/api" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Cost Optimization Notes" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "- Container Apps: Scale-to-zero enabled (no cost when idle)" >> deployment-report.md
        echo "- Static Web Apps: Free tier with CDN included" >> deployment-report.md
        echo "- Resource allocation optimized for cost-efficiency" >> deployment-report.md
        
        cat deployment-report.md

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md

    # Cost monitoring
    - name: Monitor deployment costs
      run: |
        echo "üí∞ Monthly cost estimate:"
        echo "- Container Apps (0.5 vCPU, 1GB RAM): ~$0-15/month (scale-to-zero)"
        echo "- Static Web Apps: Free tier (100GB bandwidth/month)"
        echo "- Container Registry: ~$5/month (Basic tier)"
        echo "- Total estimated monthly cost: $5-20/month"
        echo ""
        echo "üí° Cost optimization features enabled:"
        echo "- Container Apps scale to zero when idle"
        echo "- Minimal resource allocation"
        echo "- Efficient container image builds"
        echo "- CDN caching for frontend assets"