name: Azure Static Web Apps Frontend CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'frontend/**'
      - '.github/workflows/azure-frontend-staticapp.yml'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ "main" ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

# Cost-optimized environment variables
env:
  NODE_VERSION: '18.x'
  STATIC_WEB_APP_NAME: 'pactoria-frontend'
  RESOURCE_GROUP_NAME: 'pactoria-rg'
  
jobs:
  # Build and Test Job
  build-and-test:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build, Test & Quality Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true

    # Setup Node.js with caching
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Install dependencies with npm ci for faster, reliable builds
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
        
    # Run linting and type checking
    - name: Run ESLint and TypeScript checks
      run: |
        cd frontend
        npm run lint
        npm run type-check || true  # TypeScript check (if available)
      continue-on-error: false

    # Run unit tests
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:unit 2>/dev/null || echo "No unit tests configured"
      continue-on-error: true

    # Build application with environment-specific settings
    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        # Production environment variables for build
        VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://pactoria-backend.azurecontainerapps.io/api' }}
        VITE_APP_NAME: 'Pactoria MVP'
        VITE_APP_VERSION: '1.0.0'
        VITE_ENABLE_ANALYTICS: 'false'
        VITE_ENABLE_DEBUG: 'false'
        VITE_ENVIRONMENT: 'production'

    # Optimize build output
    - name: Optimize build artifacts
      run: |
        cd frontend/dist
        
        # Check build size
        echo "üì¶ Build size analysis:"
        du -sh . 
        find . -name "*.js" -exec wc -c {} + | sort -n | tail -10
        
        # Compress large files for better CDN delivery
        find . -name "*.js" -size +100k -exec gzip -k {} \;
        find . -name "*.css" -size +50k -exec gzip -k {} \;

    # Upload build artifacts for deployment
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 5

    # Security and performance audit
    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level=high --production || true
        
        # Check for known vulnerabilities
        npx audit-ci --config audit-ci.json || true
      continue-on-error: true

    # Bundle analysis for cost optimization
    - name: Analyze bundle size
      run: |
        cd frontend
        
        # Generate bundle report if webpack-bundle-analyzer is available
        npm run analyze 2>/dev/null || echo "Bundle analysis not configured"
        
        # Check for large dependencies
        echo "üìä Largest dependencies:"
        npm list --depth=0 --json | jq -r '.dependencies | to_entries[] | "\(.key): \(.value.version)"' | head -10 || true
      continue-on-error: true

  # Deploy to Production
  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment:
      name: production
      url: https://${{ secrets.STATIC_WEB_APP_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

    # Deploy to Azure Static Web Apps with cost optimization
    - name: Build and Deploy to Azure Static Web Apps
      id: builddeploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        # App configuration for cost optimization
        app_location: "frontend"
        api_location: ""  # No API functions for cost savings
        output_location: "dist"
        # Build configuration
        skip_app_build: true  # Use pre-built artifacts
        skip_api_build: true
        # Deployment configuration
        config_file_location: "frontend/staticwebapp.config.json"
        # Cost optimization settings
        deployment_environment: 'production'

    # Post-deployment verification
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Wait for deployment to propagate
        sleep 30
        
        # Get the app URL from secrets or construct it
        APP_URL="${{ secrets.STATIC_WEB_APP_URL }}"
        if [ -z "$APP_URL" ]; then
          echo "‚ö†Ô∏è STATIC_WEB_APP_URL secret not set, using default pattern"
          APP_URL="https://${{ env.STATIC_WEB_APP_NAME }}.azurestaticapps.net"
        fi
        
        echo "Testing frontend at: $APP_URL"
        
        # Test main page
        if curl -f -s "$APP_URL" > /dev/null; then
          echo "‚úÖ Frontend is accessible"
        else
          echo "‚ùå Frontend accessibility check failed"
          exit 1
        fi
        
        # Test static assets
        if curl -f -s "$APP_URL/assets/" > /dev/null 2>&1; then
          echo "‚úÖ Static assets accessible"
        else
          echo "‚ÑπÔ∏è Static assets check skipped (may be normal)"
        fi

    # Performance and SEO audit
    - name: Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.STATIC_WEB_APP_URL }}
        uploadArtifacts: true
        temporaryPublicStorage: false
      continue-on-error: true

  # Deploy staging environment for PRs
  deploy-staging:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    needs: build-and-test
    runs-on: ubuntu-latest
    name: Deploy to Staging
    environment:
      name: staging
      url: ${{ steps.deploy-staging.outputs.static_web_app_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup Node.js for staging build
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Install and build for staging
    - name: Install and build for staging
      run: |
        cd frontend
        npm ci --prefer-offline
        npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL_STAGING || 'https://pactoria-backend-staging.azurecontainerapps.io/api' }}
        VITE_APP_NAME: 'Pactoria MVP (Staging)'
        VITE_ENABLE_DEBUG: 'true'
        VITE_ENVIRONMENT: 'staging'

    # Deploy to staging environment
    - name: Deploy to Staging
      id: deploy-staging
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend"
        output_location: "dist"
        skip_app_build: true
        config_file_location: "frontend/staticwebapp.config.json"
        deployment_environment: 'pr-${{ github.event.number }}'

    # Add PR comment with staging URL
    - name: Comment staging URL on PR
      uses: actions/github-script@v6
      with:
        script: |
          const stagingUrl = '${{ steps.deploy-staging.outputs.static_web_app_url }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **Frontend staging deployment ready!**\n\nStaging URL: ${stagingUrl}\n\nPR Environment: pr-${{ github.event.number }}\nCommit: ${{ github.sha }}\n\n---\n*This staging environment will be automatically cleaned up when the PR is closed.*`
          })

  # Close PR staging environment
  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request
    steps:
    - name: Close Pull Request
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        action: "close"

  # E2E testing on successful deployment
  e2e-testing:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy-production
    runs-on: ubuntu-latest
    name: Run E2E Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    # Install dependencies including Playwright
    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    # Install Playwright browsers
    - name: Install Playwright browsers
      run: |
        cd frontend
        npx playwright install chromium

    # Run critical E2E tests
    - name: Run E2E tests
      run: |
        cd frontend
        # Run smoke tests only for cost efficiency
        npx playwright test --config=playwright.config.ts --grep="smoke" || true
      env:
        BASE_URL: ${{ secrets.STATIC_WEB_APP_URL }}
        API_URL: ${{ secrets.VITE_API_URL }}
      continue-on-error: true

    # Upload E2E test results
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 7

  # Cost monitoring and optimization
  cost-monitoring:
    if: github.ref == 'refs/heads/main'
    needs: deploy-production
    runs-on: ubuntu-latest
    name: Monitor Frontend Costs
    
    steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check Static Web App metrics
      run: |
        echo "üìä Checking Azure Static Web Apps usage..."
        
        # Get Static Web App details
        az staticwebapp show \
          --name ${{ env.STATIC_WEB_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --query '{name:name,defaultHostname:defaultHostname,sku:sku}' \
          -o table || echo "Unable to fetch Static Web App details"
        
        echo ""
        echo "üí° Cost optimization insights:"
        echo "- Static Web Apps Free tier: 100GB bandwidth/month"
        echo "- Custom domains and SSL certificates included"
        echo "- Global CDN distribution at no extra cost"
        echo "- Preview environments (PR deployments) don't count against quotas"
        echo "- Consider compressing assets and optimizing images"
        
        # Check bundle sizes from build artifacts
        echo ""
        echo "üì¶ Build optimization recommendations:"
        echo "- Current build size should be < 10MB for optimal loading"
        echo "- Use code splitting for larger applications"
        echo "- Implement lazy loading for routes and components"
        echo "- Optimize images and use modern formats (WebP, AVIF)"