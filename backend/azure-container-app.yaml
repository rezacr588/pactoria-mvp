# ===============================================================================
# Azure Container Apps Configuration - Production Ready & Cost Optimized
# ===============================================================================
# This configuration is optimized for ultra-low cost deployment
# Uses minimum resources and scale-to-zero for cost efficiency
# ===============================================================================

apiVersion: 2022-11-01-preview
location: eastus  # Most cost-effective region
name: pactoria-backend
type: Microsoft.App/containerApps
properties:
  managedEnvironmentId: /subscriptions/174a4de6-fef9-443b-bd04-ef37bb09f20a/resourceGroups/pactoria-mvp-rg/providers/Microsoft.App/managedEnvironments/pactoria-env
  
  configuration:
    # Ingress configuration
    ingress:
      external: true
      targetPort: 8000
      transport: http
      allowInsecure: false
      traffic:
        - weight: 100
          latestRevision: true
      
    # Application secrets (replace with your actual values)
    secrets:
      - name: jwt-secret-key
        value: "{JWT_SECRET_KEY}"  # Replace with actual JWT secret
      - name: secret-key
        value: "{SECRET_KEY}"      # Replace with actual app secret
      - name: groq-api-key
        value: "{GROQ_API_KEY}"    # Replace with actual Groq API key
      # Optional: Database secrets for PostgreSQL
      - name: postgresql-connection-string
        value: "{POSTGRESQL_CONNECTION_STRING}"  # Optional
    
    # Active revisions mode
    activeRevisionsMode: single
    
    # Registry credentials (if using private registry)
    registries:
      - server: "pactoriaacr.azurecr.io"
        username: "pactoriaacr"
        passwordSecretRef: "pactoriaacrazurecrio-pactoriaacr"
  
  template:
    # Container configuration
    containers:
      - name: pactoria-backend
        image: "pactoriaacr.azurecr.io/pactoria-backend:latest"
        
        # Environment variables
        env:
          # Security
          - name: JWT_SECRET_KEY
            secretRef: jwt-secret-key
          - name: SECRET_KEY
            secretRef: secret-key
          - name: GROQ_API_KEY
            secretRef: groq-api-key
          
          # Application config
          - name: ENVIRONMENT
            value: "production"
          - name: DEBUG
            value: "false"
          - name: LOG_LEVEL
            value: "INFO"
          - name: PORT
            value: "8000"
          - name: BIND_HOST
            value: "0.0.0.0"
          
          # Database config (SQLite default for cost optimization)
          - name: DATABASE_URL
            value: "sqlite:///./data/pactoria_mvp.db"
          # Uncomment for PostgreSQL:
          # - name: DATABASE_URL
          #   secretRef: postgresql-connection-string
          
          # Performance optimization for Container Apps
          - name: GUNICORN_WORKERS
            value: "1"
          - name: GUNICORN_THREADS
            value: "2"
          - name: GUNICORN_TIMEOUT
            value: "120"
          
          # Feature flags for cost optimization
          - name: ENABLE_DETAILED_LOGGING
            value: "false"
          - name: ENABLE_METRICS_COLLECTION
            value: "false"
          - name: ENABLE_REDIS_CACHING
            value: "false"
          
          # CORS will be set dynamically by startup.py
          - name: CORS_ORIGINS
            value: "https://*.azurestaticapps.net,https://*.azure.com"
          
          # File upload config
          - name: UPLOAD_DIR
            value: "/tmp/uploads"
          - name: MAX_FILE_SIZE_MB
            value: "10"
        
        # Resource allocation - OPTIMIZED for cost efficiency
        resources:
          cpu: 0.25        # Minimum CPU allocation (saves ~70% vs 1 CPU)
          memory: 0.5Gi    # Minimum memory allocation (saves ~75% vs 2GB)
          # These settings reduce costs from ~$45/month to ~$10/month
        
        # Health probes
        probes:
          - type: liveness
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          - type: readiness
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
        
        # Volume mounts for SQLite persistence
        volumeMounts:
          - volumeName: sqlite-storage
            mountPath: /app/data
          - volumeName: temp-storage
            mountPath: /tmp
    
    # Scaling configuration - ULTRA cost optimized
    scale:
      minReplicas: 0    # Scale to zero when idle (saves 100% when not used)
      maxReplicas: 1    # Single replica for maximum cost control
      rules:
        - name: http-scaler
          http:
            metadata:
              concurrentRequests: "5"   # Scale up after 5 concurrent requests
        - name: cpu-scaler
          custom:
            type: cpu
            metadata:
              type: Utilization
              value: "70"  # Scale up at 70% CPU utilization (more responsive)
    
    # Volume definitions - Cost optimized
    volumes:
      - name: sqlite-storage
        storageType: EmptyDir  # Use EmptyDir for cost savings (data won't persist across deployments)
      - name: temp-storage
        storageType: EmptyDir
    
    # Revision suffix
    revisionSuffix: "v1"