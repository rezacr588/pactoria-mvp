#!/bin/bash

# Pactoria MVP Service Management Script
# Manage both frontend and backend services

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Service configuration
BACKEND_LABEL="com.pactoria.backend"
FRONTEND_LABEL="com.pactoria.frontend"
SERVICES_DIR="/Users/rezazeraat/Desktop/Pactoria-MVP/services"
LAUNCH_AGENTS_DIR="$HOME/Library/LaunchAgents"
LOGS_DIR="$SERVICES_DIR/logs"

# Function to print colored messages
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if a service is running
is_running() {
    local service=$1
    launchctl list | grep -q "$service"
    return $?
}

# Function to get service status
get_status() {
    local service=$1
    local name=$2
    
    if is_running "$service"; then
        local pid=$(launchctl list | grep "$service" | awk '{print $1}')
        if [ "$pid" != "-" ]; then
            print_message "$GREEN" "✓ $name is running (PID: $pid)"
        else
            print_message "$YELLOW" "⚠ $name is loaded but not running"
        fi
    else
        print_message "$RED" "✗ $name is not running"
    fi
}

# Function to check port usage
check_port() {
    local port=$1
    local service=$2
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        local pid=$(lsof -Pi :$port -sTCP:LISTEN -t)
        print_message "$GREEN" "  Port $port is in use by PID $pid"
    else
        print_message "$YELLOW" "  Port $port is free"
    fi
}

# Function to install service
install_service() {
    local plist_file=$1
    local service_label=$2
    local service_name=$3
    
    # Create logs directory
    mkdir -p "$LOGS_DIR"
    
    # Copy plist to LaunchAgents
    cp "$plist_file" "$LAUNCH_AGENTS_DIR/"
    
    # Load the service
    launchctl load -w "$LAUNCH_AGENTS_DIR/$(basename $plist_file)"
    
    if [ $? -eq 0 ]; then
        print_message "$GREEN" "✓ $service_name installed and loaded successfully"
    else
        print_message "$RED" "✗ Failed to install $service_name"
        return 1
    fi
}

# Function to uninstall service
uninstall_service() {
    local service_label=$1
    local service_name=$2
    local plist_file="$LAUNCH_AGENTS_DIR/${service_label}.plist"
    
    if [ -f "$plist_file" ]; then
        # Unload the service
        launchctl unload -w "$plist_file" 2>/dev/null
        
        # Remove the plist file
        rm "$plist_file"
        
        print_message "$GREEN" "✓ $service_name uninstalled successfully"
    else
        print_message "$YELLOW" "⚠ $service_name is not installed"
    fi
}

# Function to start service
start_service() {
    local service_label=$1
    local service_name=$2
    
    if is_running "$service_label"; then
        print_message "$YELLOW" "⚠ $service_name is already running"
    else
        launchctl start "$service_label"
        sleep 2
        if is_running "$service_label"; then
            print_message "$GREEN" "✓ $service_name started successfully"
        else
            print_message "$RED" "✗ Failed to start $service_name"
            print_message "$YELLOW" "Check logs at: $LOGS_DIR"
        fi
    fi
}

# Function to stop service
stop_service() {
    local service_label=$1
    local service_name=$2
    
    if is_running "$service_label"; then
        launchctl stop "$service_label"
        sleep 2
        if ! is_running "$service_label"; then
            print_message "$GREEN" "✓ $service_name stopped successfully"
        else
            print_message "$RED" "✗ Failed to stop $service_name"
        fi
    else
        print_message "$YELLOW" "⚠ $service_name is not running"
    fi
}

# Function to restart service
restart_service() {
    local service_label=$1
    local service_name=$2
    
    stop_service "$service_label" "$service_name"
    sleep 1
    start_service "$service_label" "$service_name"
}

# Function to show logs
show_logs() {
    local service=$1
    local lines=${2:-50}
    
    case $service in
        backend)
            print_message "$BLUE" "=== Backend Logs (last $lines lines) ==="
            tail -n $lines "$LOGS_DIR/backend-stdout.log" 2>/dev/null || print_message "$YELLOW" "No backend logs found"
            if [ -f "$LOGS_DIR/backend-stderr.log" ] && [ -s "$LOGS_DIR/backend-stderr.log" ]; then
                print_message "$RED" "\n=== Backend Errors ==="
                tail -n 20 "$LOGS_DIR/backend-stderr.log"
            fi
            ;;
        frontend)
            print_message "$BLUE" "=== Frontend Logs (last $lines lines) ==="
            tail -n $lines "$LOGS_DIR/frontend-stdout.log" 2>/dev/null || print_message "$YELLOW" "No frontend logs found"
            if [ -f "$LOGS_DIR/frontend-stderr.log" ] && [ -s "$LOGS_DIR/frontend-stderr.log" ]; then
                print_message "$RED" "\n=== Frontend Errors ==="
                tail -n 20 "$LOGS_DIR/frontend-stderr.log"
            fi
            ;;
        all)
            show_logs backend 30
            echo ""
            show_logs frontend 30
            ;;
        *)
            print_message "$RED" "Invalid service. Use: backend, frontend, or all"
            ;;
    esac
}

# Function to follow logs in real-time
follow_logs() {
    local service=$1
    
    case $service in
        backend)
            print_message "$BLUE" "Following backend logs (Ctrl+C to stop)..."
            tail -f "$LOGS_DIR/backend-stdout.log"
            ;;
        frontend)
            print_message "$BLUE" "Following frontend logs (Ctrl+C to stop)..."
            tail -f "$LOGS_DIR/frontend-stdout.log"
            ;;
        all)
            print_message "$BLUE" "Following all logs (Ctrl+C to stop)..."
            tail -f "$LOGS_DIR/backend-stdout.log" "$LOGS_DIR/frontend-stdout.log"
            ;;
        *)
            print_message "$RED" "Invalid service. Use: backend, frontend, or all"
            ;;
    esac
}

# Main command handling
case "$1" in
    install)
        print_message "$BLUE" "Installing Pactoria services..."
        
        # Make scripts executable
        chmod +x "$SERVICES_DIR/backend-start.sh"
        chmod +x "$SERVICES_DIR/frontend-start.sh"
        
        # Install services
        install_service "$SERVICES_DIR/$BACKEND_LABEL.plist" "$BACKEND_LABEL" "Backend"
        install_service "$SERVICES_DIR/$FRONTEND_LABEL.plist" "$FRONTEND_LABEL" "Frontend"
        
        print_message "$GREEN" "\n✓ Installation complete!"
        print_message "$BLUE" "Services will start automatically on login."
        print_message "$BLUE" "Use 'pactoria-service status' to check status."
        ;;
        
    uninstall)
        print_message "$BLUE" "Uninstalling Pactoria services..."
        uninstall_service "$BACKEND_LABEL" "Backend"
        uninstall_service "$FRONTEND_LABEL" "Frontend"
        print_message "$GREEN" "\n✓ Uninstallation complete!"
        ;;
        
    start)
        case "$2" in
            backend)
                start_service "$BACKEND_LABEL" "Backend"
                ;;
            frontend)
                start_service "$FRONTEND_LABEL" "Frontend"
                ;;
            ""|all)
                print_message "$BLUE" "Starting all services..."
                start_service "$BACKEND_LABEL" "Backend"
                start_service "$FRONTEND_LABEL" "Frontend"
                ;;
            *)
                print_message "$RED" "Invalid service. Use: backend, frontend, or all"
                ;;
        esac
        ;;
        
    stop)
        case "$2" in
            backend)
                stop_service "$BACKEND_LABEL" "Backend"
                ;;
            frontend)
                stop_service "$FRONTEND_LABEL" "Frontend"
                ;;
            ""|all)
                print_message "$BLUE" "Stopping all services..."
                stop_service "$BACKEND_LABEL" "Backend"
                stop_service "$FRONTEND_LABEL" "Frontend"
                ;;
            *)
                print_message "$RED" "Invalid service. Use: backend, frontend, or all"
                ;;
        esac
        ;;
        
    restart)
        case "$2" in
            backend)
                restart_service "$BACKEND_LABEL" "Backend"
                ;;
            frontend)
                restart_service "$FRONTEND_LABEL" "Frontend"
                ;;
            ""|all)
                print_message "$BLUE" "Restarting all services..."
                restart_service "$BACKEND_LABEL" "Backend"
                restart_service "$FRONTEND_LABEL" "Frontend"
                ;;
            *)
                print_message "$RED" "Invalid service. Use: backend, frontend, or all"
                ;;
        esac
        ;;
        
    status)
        print_message "$BLUE" "=== Pactoria Service Status ==="
        echo ""
        get_status "$BACKEND_LABEL" "Backend"
        check_port 8000 "Backend"
        echo ""
        get_status "$FRONTEND_LABEL" "Frontend"
        check_port 5173 "Frontend"
        echo ""
        
        # Show log file sizes
        if [ -d "$LOGS_DIR" ]; then
            print_message "$BLUE" "=== Log Files ==="
            ls -lh "$LOGS_DIR"/*.log 2>/dev/null | awk '{print "  " $9 ": " $5}' || print_message "$YELLOW" "  No log files found"
        fi
        ;;
        
    logs)
        show_logs "${2:-all}" "${3:-50}"
        ;;
        
    follow)
        follow_logs "${2:-all}"
        ;;
        
    clean-logs)
        print_message "$BLUE" "Cleaning log files..."
        if [ -d "$LOGS_DIR" ]; then
            for log in "$LOGS_DIR"/*.log; do
                if [ -f "$log" ]; then
                    > "$log"
                    print_message "$GREEN" "✓ Cleaned: $(basename $log)"
                fi
            done
        fi
        ;;
        
    dev)
        # Quick development mode - stop launchd services and run in foreground
        print_message "$BLUE" "Entering development mode..."
        print_message "$YELLOW" "Stopping background services..."
        
        stop_service "$BACKEND_LABEL" "Backend"
        stop_service "$FRONTEND_LABEL" "Frontend"
        
        print_message "$BLUE" "\nStarting services in foreground (Ctrl+C to stop)..."
        print_message "$YELLOW" "Backend: http://localhost:8000"
        print_message "$YELLOW" "Frontend: http://localhost:5173"
        echo ""
        
        # Run both services in parallel
        trap 'kill 0' INT
        (cd /Users/rezazeraat/Desktop/Pactoria-MVP/backend && python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000) &
        (cd /Users/rezazeraat/Desktop/Pactoria-MVP/frontend && npm run dev) &
        wait
        ;;
        
    help|"")
        print_message "$BLUE" "Pactoria MVP Service Manager"
        echo ""
        echo "Usage: pactoria-service <command> [service]"
        echo ""
        echo "Commands:"
        echo "  install              Install and enable services"
        echo "  uninstall            Uninstall and remove services"
        echo "  start [service]      Start service(s) (backend/frontend/all)"
        echo "  stop [service]       Stop service(s) (backend/frontend/all)"
        echo "  restart [service]    Restart service(s) (backend/frontend/all)"
        echo "  status               Show service status and ports"
        echo "  logs [service] [n]   Show last n lines of logs (default: 50)"
        echo "  follow [service]     Follow logs in real-time"
        echo "  clean-logs           Clear all log files"
        echo "  dev                  Run services in foreground (development mode)"
        echo "  help                 Show this help message"
        echo ""
        echo "Services:"
        echo "  backend              FastAPI backend service (port 8000)"
        echo "  frontend             React frontend service (port 5173)"
        echo "  all                  Both services (default)"
        echo ""
        echo "Examples:"
        echo "  pactoria-service install           # Install both services"
        echo "  pactoria-service start             # Start both services"
        echo "  pactoria-service status            # Check status"
        echo "  pactoria-service logs backend 100  # Show last 100 lines of backend logs"
        echo "  pactoria-service follow frontend   # Follow frontend logs in real-time"
        echo "  pactoria-service dev               # Run in development mode"
        ;;
        
    *)
        print_message "$RED" "Invalid command: $1"
        echo "Use 'pactoria-service help' for usage information"
        exit 1
        ;;
esac